[{"tag":"discuz","name":"文件、方法位置","lang":"php","des":"source\\module\\portal\\portal_view.php    // 文章详情页方法\ntemplate\\xxx\\portal\\view_xx.htm    // 文章详情页模板，根据设置有所不同\n"},{"tag":"discuz","name":"首页设置portal隐藏","lang":"php","des":"// 1. 全局-域名设置-应用域名：\n//      默认：www.xxx.com\n// 2. 界面-导航设置-主导航：\n//      去掉内置首页，添加一个首页[链接为/]\n"},{"tag":"discuz","name":"只加载DB","lang":"php","des":"define('IN_DISCUZ', true);\nrequire_once './source/function/function_core.php';\nrequire_once './source/class/discuz/discuz_database.php';\nrequire_once './config/config_global.php';\nclass DB extends discuz_database {}\n$driver = function_exists('mysql_connect') ? 'db_driver_mysql' : 'db_driver_mysqli';\nrequire_once \\\"./source/class/db/$driver.php\\\";\nDB::init($driver, $_config['db']);\n"},{"tag":"git","name":"修改一些信息","lang":"bash","des":"git commit --amend    # 修改commit\ngit reset .    # commit前取消add缓冲\n"},{"tag":"git","name":"子模块 submodule","lang":"shell","des":"git submodule add 仓库地址 路径    # 添加子模块\ngit submodule update --init --recursive    # 更新子模块\ngit rm ./xxx & rm -rf ./xxx    # 删除子模块\n"},{"tag":"git","name":"初始新仓库流程","lang":"bash","des":"# 1. 新建项目\ngit clone https://github.com/wilon/wilon.github.io.git    # 代码copy进来，直接push\n# 2. 已有项目\ngit init\ngit remote add origin https://github.com/wilon/wilon.github.io.git\ngit pull\ngit merge origin/master\ngit push --set-upstream origin master\n#-- 或修改 .git/config\n[remote \"origin\"]\n    url = https://github.com/wilon/oh-my-zsh.git\n    fetch = +refs/heads/master:refs/remotes/origin/master\n[branch \"master\"]\n    remote = origin\n    merge = refs/heads/master\n"},{"tag":"git","name":"分支","lang":"shell","des":"# 本地分支操作\ngit branch    # 查看本地分支\ngit branch -r    # 查看远程分支\ngit branch -a    # 查看所有分支\ngit branch [name]     # 创建本地分支\ngit branch -d [name]     # 删除分支\ngit checkout [name]    # 切换分支\ngit checkout -b [name]    # 创建新分支并立即切换到新分支\ngit merge [name]     # 合并name分支到当前分支\n# 远程分支操作\ngit push origin [name]    # 创建远程分支(本地分支push到远程)\ngit push origin :heads/[name]    # 删除远程分支\ngit push origin test:master    # 提交本地test分支作为远程的master分支，远程的github就会自动创建一个test分支\ngit push origin test:test    # 提交本地test分支作为远程的test分支\ngit push origin :test    # 删除远程分支，刚提交到远程的test将被删除，但是本地还会保存的，不用担心\n# 修改默认HEAD指向分支\nvim .git/refs/remotes/origin/HEAD\n`ref: refs/remotes/origin/master`\n"},{"tag":"git","name":"远程仓库","lang":"shell","des":"git clone git://github.com/jquery/jquery.git    # 检出仓库\ngit remote -v    # 查看远程仓库\ngit remote add [name] [url]    # 添加远程仓库\ngit remote rm [name]    # 删除远程仓库\ngit remote set-url --push[name][newUrl]    # 修改远程仓库\ngit pull [remoteName] [localBranchName]    # 拉取远程仓库\ngit push [remoteName] [localBranchName]    # 推送远程仓库\n"},{"tag":"git","name":"私钥与公钥","lang":"shell","des":"# TortoiseGit 使用 id_rsa\n# 1. 生成Putty key：puttygen工具，Conversions -> Import key -> Save private key；\n# 2. clone时使用\nssh-keygen -t rsa -N '' -f ~/.ssh/id_rsa -q -b 2048    # 生成公私钥\nssh-keygen -l -f ~/.ssh/id_rsa.pub    # 查看公钥指纹\n"},{"tag":"git","name":"新模块工作流程","lang":"shell","des":"# 主分支master下\ngit add mynewsfile/*    # 添加文件\ngit commit [-a] -m '说明'    # 提交到本地库，-a所有改动\ngit pull    # 从远程库拉取\ngit push [origin master]    # 提交到远程库，默认master\n"},{"tag":"git","name":"小改动工作流程","lang":"shell","des":"# 主分支master下\ngit add file/*    # 添加文件\ngit commit [-a] -m '说明'    # 提交到本地库，-a所有改动\ngit pull    # 从远程库拉取\n# 解决冲突\ngit push [origin master]    # 提交到远程库，默认master\n"},{"tag":"git","name":"tag 管理","lang":"shell","des":"git tag                 # 列出所有 tag\ngit tag v1.0.1          # 创建 tag: v1.0.1\ngit push origin --tags  # 将 tag 推送到远库\ngit tag -d v1.0.1       # 删除本地 tag\ngit push origin :refs/tags/v1.0.1    # 删除远程仓库 tag\n"},{"tag":"git","name":"查看一些东西","lang":"shell","des":"vim .git/config    # 查看项目皮配置\ngit status    # 项目目录里\ngit branch -a    # 查看所有分支，*代表本地\ngit diff 文件    # 当期文件修改\ngit log    # 查看提交日志\ngit log -p    # 查看提交日志，包含代码\ngit log --graph    # 以图表形式查看分支提交日志\ngit show    # 查看最近一次提交代码\ngit show commit_id   # 查看某一次提交代码\n"},{"tag":"git","name":"配置一些东西","lang":"shell","des":"# 1. 命令配置\ngit config --global color.diff auto  && git config --global color.status auto && git config --global color.branch auto    # git配置颜色\ngit config --global alias.st status    # git配置别名\ngit config --global user.name wilon && git config --global user.email wilonx@163.com    # git配置用户名邮箱\ngit config --global http.proxy \"127.0.0.1:8087\"    # 设置代理\n# 2. 修改配置文件 ~/.gitconfig，已同步在oh-my-zsh项目里\nwget <a href=\"https://raw.githubusercontent.com/wilon/oh-my-zsh/master/templates/gitconfig.zsh-template\" target=\"_blank\">https://raw.githubusercontent.com/wilon/oh-my-zsh/master/templates/gitconfig.zsh-template</a> -O ~/.gitconfig\n"},{"tag":"git","name":"回退一些东西","lang":"shell","des":"git clean -n     # 是一次clean的演习, 告诉你哪些文件会被删除. 记住他不会真正的删除文件, 只是一个提醒\ngit clean -df    # 删除当前目录下没有被track过的文件和文件夹\ngit clean -xf    # 删除当前目录下所有没有track过的文件. 不管他是否是.gitignore文件里面指定的文件夹和文件\n"},{"tag":"git","name":"其他","lang":"shell","des":"git clone https://github.com/Wilon/mynote.git    # 克隆一个项目\ngit reset --hard HEAD~1    # 回退所有内容到上N个版本，数字可变\n    git config user.name \"Travis CI\" && git config user.email \"travis@travis-ci.org\" && date > data/pushdata && git commit -a -m \"$(date)\" && git push    # 自动提交且不产生activity\n"},{"tag":"git","name":"install 安装最新版","lang":"shell","des":"# 1. 依赖\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel\napt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev\n# 2. 下载 tar 包，https://github.com/git/git/releases 解压\nwget https://github.com/git/git/archive/v2.15.0.tar.gz\ntar -zxvf v2.15.0.tar.gz\ncd git-2.15.0/\n# 3. 安装\nmake prefix=/usr/local all\nmake prefix=/usr/local install\n# 4. 加入到环境变量，或者覆盖旧的git\n/usr/local/bin/git version\n"},{"tag":"git","name":"git rebase, 合并commit","lang":"shell","des":"# 1, 查看log\ngit log\n# 2, 找到合并到哪里的 commit hash, 执行合并\ngit rebase -i [hash]\n# 3, 编辑合并选项，参考操作下面的文档说明\n# 4, 提交\ngit push --force\n# 其他\ngit rebase --abort    # 撤销 rebase\n"},{"tag":"git","name":"Git pull 强制覆盖本地文件","lang":"shell","des":"git fetch --all\ngit reset --hard origin/master\ngit pull\n# 或者 git reset --hard HEAD~[N] , 再 pull\n"},{"tag":"go","name":"go get 使用代理","lang":"bash","des":"export http_proxy=http://127.0.0.1:51967\nexport https_proxy=http://127.0.0.1:51967\ngo get ...\n"},{"tag":"go","name":"go build","lang":"bash","des":"go build -o bin/test.exe src/main.go\n# win\ngo build -ldflags \"-s -w -H=windowsgui\" -o bin/test.exe src/main.go\n"},{"tag":"jquery","name":"jquery dom 与 string 之间转换","lang":"js","des":"var string = '<div class=\"div1\">Hello World!</div><div class=\"div2\">Hello World!2333</div>'\n// string 转成对象处理\nvar divEle = $('<div/>');\ndivEle.html(string);\ndivEle.find('.div2').html('<h1>Hello World!2333</h2>');\nconsole.log(divEle.html());\n"},{"tag":"js","name":"正则表达式 RegExp","lang":"javascript","des":"// 正则操作\nvar myReg = /a(b.)d/g    // g 全局搜索；i 不区分大小写搜索；m 多行搜索；\nvar myReg = new RegExp('/a(b.)d/', 'g');    // 好处是支持生成字符串正则\nvar resIsMatch = myReg.test('aabcdefg');    // true\nvar resArray = myReg.exec('aabcdefg');    // [\"abcd\", \"bc\"]\n// 字符串操作正则\nvar myStr = 'aabcdefg';\nvar resArray = myStr.match(myReg);    // [\"abcd\"]\nvar resNum = myStr.search(myReg);    // 1\nvar resStr = myStr.replace(myReg, 'zzz');    // \"azzzefg\"\nvar resArray = myStr.split(myReg);    // [\"a\", \"bc\", \"efg\"]\n"},{"tag":"js","name":"gulp task 顺序","lang":"javascript","des":"gulp.task('rev', ['js', 'css', 'md'], function() {});\n// 同步执行：js, css, md，写 return 的会等待执行完才执行 rev\n// 若：js 没写 return，css, md 写了，\n// 则：css, md 执行完，js 仍在执行，同时开始执行 rev\n"},{"tag":"js","name":"数组内随机取一条","lang":"javascript","des":"var tips = [\n    '在【操作详细】里搜“API”，可以查看日志',\n    '在【操作详细】里搜IP地址如“192.168.80”，可以查看该IP日志',\n    '限制IP里 * 代表所有',\n];\nvar dd = parseInt(Math.random() * tips.length);\n$scope.tips = tips[dd];\n"},{"tag":"js","name":"字符串 String","lang":"javascript","des":"// trim\nString.prototype.trim = function() {\n    return this.replace(/(^\\s*)|(\\s*$)/g, '');\n};\n"},{"tag":"js","name":"日期 new Date()","lang":"javascript","des":"Date();    // \"Wed Nov 09 2016 10:44:34 GMT+0800 (CST)\"\nvar date = new Date();\n// get方法获取具体时间值；set方法设置是兼职；to方法格式化\ndate.getFullYear();    // 2016\ndate.toString();    // \"Wed Nov 09 2016 10:46:41 GMT+0800 (CST)\"\ndate.toLocaleString();    // \"2016/11/9 上午10:47:10\"\ndate.toLocaleDateString();    // \"2016/11/9\"\ndate.toLocaleTimeString();    // \"上午10:47:30\"\ndate.setFullYear(1947);\ndate.toString();    // \"Wed Nov 09 2016 10:46:41 GMT+0800 (CST)\"\n// 格式化函数\nDate.prototype.format = function(format) {\n    var o = {\n        \"M+\": this.getMonth() + 1,    //month\n        \"d+\": this.getDate(),    //day\n        \"h+\": this.getHours(),    //hour\n        \"m+\": this.getMinutes(),    //minute\n        \"s+\": this.getSeconds(),    //second\n        \"q+\": Math.floor((this.getMonth() + 3) / 3),    //quarter\n        \"S\": this.getMilliseconds()    //millisecond\n    }\n    if (/(y+)/.test(format)) {\n        format = format.replace(RegExp.$1, (this.getFullYear() + \"\").substr(4 - RegExp.$1.length));\n    }\n    for (var k in o) {\n        if (new RegExp(\"(\" + k + \")\").test(format)) {\n            format = format.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : (\"00\"+ o[k]).substr((\"\" + o[k]).length));\n        }\n    }\n    return format;\n}\nnew Date().format('yyyy-MM-dd hh:mm:ss');    // \"2016-11-09 11:02:48\"\nnew Date(1491983649 * 1000).format('yyyy-MM-dd hh:mm:ss');\n"},{"tag":"js","name":"其他","lang":"javascript","des":"// 模板字符串 -v >= ES6\nvar user = {name:'weilong', age:20},\n    num = 8;\nvar res = `My name is ${user.name}, age ${user.age + num}, num ${num}`;\n//检测URL\nString.prototype.checkeUrl = function () {\n    return new RegExp('^(https|http|ftp|rtsp|mms)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|]', 'g').test(url);\n}\n"},{"tag":"js","name":"数组方法","lang":"javascript","des":"varr colors = ['red', 'green', 'blue'];\nvar countColor = colors.length;\nvar colorsStr = colors.join(', ');    // 拼接数组\nvar countColor = colors.push('black');    // 栈：末尾推入一项\nvar endColor = colors.pop();    // 栈：去除末尾项\nvar startColor = colors.shift();    // 队列：去除首项\nvar countColor = colors.unshift('red');    // 队列：首部推入一项\nvar colors = colors.sort();    // 从小到大排序\nvar colors = colors.reverse();    // 从大到小排序\nvar colors = colors.sort(function (v1, v2) {\nif (v1.length > v2.length) {\n        return 1;    // 前面的长就交换\n    } else {\n        return -1;\n    }\n});    // 字符串由短到长排序\nvar colorsNew = colors.concat('yellow', ['brown', 'blue']);    // 数组拼接\nvar colorsNew1 = colors.slice(2);    // 返回去掉数2项后所有项的数组\nvar colorsNew2 = colors.slice(2, 4);    // 返回去掉第2-4项的数组\nvar removedColors = colors.splice(2);    // 返回去掉数2项后所有项的数组，colors为剩下值\nvar removedColors1 = colors.splice(2, 4);    // 返回去掉第2项后数4项的数组，colors为剩下值\nvar removedColors2 = colors.splice(2, 4, 'white');    // 返回去掉第2项后数4项的数组，colors为剩下值，第2项+white\nvar removedColors2 = colors.splice(2, 0, 'white');    // 返回去掉第2项后共0项的数组，colors为剩下值，第2项+white\nvar index = colors.indexOf('red');    // red位置\nvar index1 = colors.lastIndexOf('red');    // red最后出现的位置\nvar index2 = colors.indexOf('red', 'black');    // red位置为-1后数black位置\nvar everyIsRed = colors.every(function (item, index, array) {\n    return item == 'red';\n});   // 每一项都为red则返回true\nvar someIsRed = colors.some(function (item, index, array) {\n    return item == 'red';\n});   // 有一项为red则返回true\nvar mapRes = colors.map(function (item, index, array) {\n    return item.toLocaleUpperCase();\n});   // 每一项做操作，返回操作后数组\nvar joinRes = colors.reduce(function (prev, cur, index, array) {\n    return prev + index + ',' + cur;    // index为cur键\n});   // 并归对数组正序操作，返回操作后返回值\nvar joinRes = colors.reduceRight(function (prev, cur, index, array) {\n    return prev + index + ',' + cur;    // prev为上次返回值\n});   // 并归对数组反序操作，返回操作后返回值\n"},{"tag":"linux","name":"zsh + oh-my-zsh","lang":"shell","des":"yum -y install zsh\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/wilon/oh-my-zsh/master/tools/install.sh)\"\nchsh -s /bin/zsh    # 修改默认zsh，需重启。或修改 /etc/passwd\nzsh    # 手动切换\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/wilon/oh-my-zsh/master/tools/simple_install.sh)\"    # bash config\nwget https://raw.githubusercontent.com/wilon/oh-my-zsh/master/templates/inputrc.zsh-template -O ~/.inputrc    # inputrc config\n"},{"tag":"linux","name":"目录文件查找字符串grep","lang":"shell","des":"grep [-acinv] [--color=auto] 'string/preg' FILENAME/FILE_DIR\n-a # 将 binary 文件以 text 文件的方式搜寻数据\n-i # 忽略大小写的不同，所以大小写视为相同\n-r # 递归查找 FILE_DIR\n-n # 顺便输出行号\n-c # 计算找到 '搜寻字符串' 的次数\n-v # 反向选择，亦即显示出没有 '搜寻字符串' 内容的那一行！\n-o # 只输出文件中匹配到的部分。\n    -E # 匹配正则表达式\n    --color=auto # 可以将找到的关键词部分加上颜色的显示喔！\n# 管道符 grep，适配 sed、awk 的正则\n## 正则  .   []   \\(\\)  \\{3\\}  \\+   *  \\|  [0-9]  \\s\n## 字符  \\.  \\[\\]  ()   {}      +  \\*   |\ncat cache/smtp.log | grep '\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+'    # ip\n# zgrep 在Gzip压缩文件中搜索\nzgrep -i error /var/log/syslog.2.gz\n"},{"tag":"linux","name":"awk sed 文件操作","lang":"shell","des":"awk ‘!a[$0]++’ path/to/file    # 去除重复行\ncat cache/smtp.log | grep \"To\" | awk '{print $9;}' | sort | uniq -c    # 查看邮件日志 | 有“To”的行 | 列出用户 | 排序 | 统计用户出现次数\nawk '{print length($0), $0}' /tmp/awords.log | sort -nr | head -n 7    # 统计出文件内字符最多的7行\nfor i in `ls`; do cp -f $i `echo $i | sed 's/^\\([0-9]\\..*md\\)$/0\\1/'`; done    # 目录下 1.xx.md 2.xx.md 复制为 01.xx.md 02.xx.md\nfor i in `ls`; do cp -f $i `echo $i | sed 's/\\..*px_.*_.*.net.png$/.png/'`; done    # 批量修改多余文件后缀\nsed -i \"s/oldstring/newstring/g\" `grep oldstring -rl yourdir`    # 把目录下所有文件的 oldstring 替换为 newstring\nsed -i \"s/garden/mirGarden/g\" ./readme.md    # 将文件内的字符替换\nsed -i \"s/garden/mirGarden/g\" `ls`    # 将当前文件夹下所有文件内的字符替换\n"},{"tag":"linux","name":"ind 文件及目录操作","lang":"shell","des":"find .    # 列出所有文件及目录\nfind . -type f -size +50M -print0 | xargs -0 du -h | sort -nr    # 列出大于50M的文件 | 且显示文件大小 | 并排序\nfind . -type d -name \".svn\" | xargs rm -rf    # 找出所有“.svn”文件夹 | 并删除\nfind . -name .DS_Store | xargs rm    # 找出所有“.DS_Store”文件 | 并删除\nfind /data/logs/nginx -type f -name \"*.gz\" -ctime -5 | xargs zcat | grep 'HTTP/1.1\" 500'\n"},{"tag":"linux","name":"一行脚本，作为任务","lang":"shell","des":"# 凌晨备份数据库\n0 2 * * * /usr/bin/mysqldump -uDUMPUSER -pDUMPUSERPWD DATABASE | gzip > /data/backup/mysql/TABLE_$(date +\"\\%Y\\%m\\%d\").sql.gz\n# 只保留最近5天\n0 2 * * * find /data/backup/mysql/ -name \"TABLE_*.sql.gz\" -type f -mtime +5 -exec rm {} \\; > /dev/null 2>&1\n# Mac、Linux 更新host，科学上网\n*/10 * * * * /usr/bin/curl -o /private/etc/hosts https://raw.githubusercontent.com/googlehosts/hosts/master/hosts-files/hosts\n# 检测服务\nif test `pgrep nginx | wc -l` -eq 0; then /usr/sbin/service nginx start > /dev/null; fi;\nif test `pgrep php-fpm | wc -l` -eq 0; then /usr/sbin/service php7.0-fpm start > /dev/null; fi;\nif test `pgrep mysql | wc -l` -eq 0; then /usr/sbin/service mysql start > /dev/null; fi;\n# 检测 URL\n*/10 7-23 * * * (/usr/bin/wget -O /tmp/wechat.check http://wx.baitongshiji.com/wechat/check || /usr/sbin/service docker restart) >> /tmp/wechat.check.log 2>&1\n"},{"tag":"linux","name":"查看进程 ps","lang":"shell","des":"pa aux\nps -ef | grep lantern | grep -v grep | awk '{print $2}' | xargs kill -9     # 杀死‘lantern’的进程\nnohup php colloct.php &    # 在后台运行\n"},{"tag":"linux","name":"nodejs + npm + gulp","lang":"shell","des":"# install\nyum -y install nodejs\nyum -y install npm\nnpm install gulp -g    # global\nnpm install gulp --save    # save to package.json\n# Ubuntu install last nodejs\ncurl -sL https://deb.nodesource.com/setup_6.x | sudo bash -    # source\nsudo apt-get install nodejs\n# other\nnpm install -g    # 没有包则下载，有则更新包依赖\nnpm config set registry https://registry.npm.taobao.org    # taobao 镜像\nsudo ln -s /usr/bin/nodejs /usr/bin/node    # Ubuntu\n"},{"tag":"linux","name":"other","lang":"shell","des":"echo $PATH    # 查看可以PATH，按优先级排列\necho 'aaaaaa' > test.htm\necho -n 'aaaaaa' > test.htm    # 没有换行\n"},{"tag":"linux","name":"top 命令详解 help","lang":"shell","des":"第一行，任务队列信息 — 当前系统时间 — 系统运行时间 — 当前用户登录数 - 负载情况\n第三行，CPU状态信息 - 用户空间占用CPU的百分比 — 内核空间占用CPU的百分比, id — 空闲CPU百分比\n第四行，内存状态 - 物理内存总量 — 使用中的内存总量 — 空闲内存总量 — 缓存的内存量    # 8,000,000 = 8G\n第五行，SWAP交换分区信息 — 交换区总量 — 使用的交换区总量 — 空闲交换区总量 — 缓冲的交换区总量\n第七行以下：各进程（任务）的状态监控\n    PID — 进程id\n    USER — 进程所有者\n    PR — 进程优先级\n    NI — nice值。负值表示高优先级，正值表示低优先级\n    VIRT — 进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\n    RES — 进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA\n    SHR — 共享内存大小，单位kb\n    S — 进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程\n    %CPU — 上次更新到现在的CPU时间占用百分比\n    %MEM — 进程使用的物理内存百分比\n    TIME+ — 进程使用的CPU时间总计，单位1/100秒\n    COMMAND — 进程名称（命令名/命令行）\n"},{"tag":"linux","name":"docker run param","lang":"shell","des":"-d    # 使用于服务型，containter将会运行在后台模式(Detached mode)。此时所有I/O数据只能通过网络资源或者共享卷组来进行交互。注意：--rm 和 -d不能共用！\n--rm    # 使用执行命令型，在container结束时自动清理其所产生的数据。注意：--rm 和 -d不能共用！\n--restart=always    # 随docker服务自启动\n"},{"tag":"linux","name":"docker 安装","lang":"shell","des":"# centos 6.8\nrpm -Uvh http://ftp.riken.jp/Linux/fedora/epel/6Server/x86_64/epel-release-6-8.noarch.rpm\nyum -y install docker-io\n"},{"tag":"linux","name":"docker help","lang":"shell","des":"service docker start    # 启动服务\nsystemctl enable docker    # Centos 开机启动\n# docker CONTAINER 镜像\ndocker pull <repository>\ndocker images    #  查看安装的镜像\ndocker run <repository> <command>     # 在容器内运行镜像\ndocker rmi <image id>    # 删除镜像\n# docker CONTAINER 容器\ndocker ps -a    # 查看所有容器\ndocker start <container id>    # 开始该容器\ndocker stop <container id>    # 停止该容器\ndocker rm <container id>    # 删除该容器\ndocker attach <container id>    # 进入正在运行的容器\ndocker exec -it <container id> /bin/bash    # 以bash进入容器\n# Dockerfile\ndocker build -t <image name> .\n"},{"tag":"linux","name":"docker Dockerfile","lang":"shell","des":"    构建镜像时会执行Dockerfile中的RUN命令\n    容器启动的时候会执行Dockerfile中的CMD命令\n"},{"tag":"linux","name":"输出分类、级别","lang":"shell","des":"php -v > /dev/null 2>&1    # 不保留所有输出\nphp -v 2>/dev/null    # 不保留错误输出\n"},{"tag":"linux","name":"标准化输出","lang":"shell","des":"30 21 * * * php -v > /dev/null 2>&1    # 不保留输出\nfind / -name 'lnmp.conf' 2>/dev/null    # 不显示错误输出（Permission denied）\n"},{"tag":"linux","name":"定时任务crontab","lang":"shell","des":"# 安装配置\nyum -y install vixie-cron    # 软件包是cron的主程序；\nyum -y install crontabs    # 软件包是用来安装、卸装、或列举用来驱动cron守护进程的表格的程序。\nservice crond start    # 启动服务\nchkconfig --level 345 crond on    # 配置开机启动\n# 参数\ncrontab [ -u user ] -l    # 列出当前用户(指定用户)的任务\ncrontab [ -u user ] -e    # 编辑当前用户(指定用户)的任务\ncrontab [ -u user ] -r    # 清除当前用户(指定用户)的任务\n# 配置命令行\nMAILTO=\"\"\nSHELL=/bin/sh\nPATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin    # echo $PATH查看\n# 日志\n30 21 * * * php -v > /dev/null 2>&1    # 不保留输出\n30 21 * * * php -v >> /tmp/test.log    # 保存日志\n*/1 * * * * (echo $(date +\"\\%Y-\\%m-\\%d \\%H:\\%M:\\%S\") && echo 1233333) >> /tmp/crond.log 2>&1    # 测试服务是否正常\n# 定时任务： 分　时　日　月　周　 命令\n30 21 * * * /usr/local/etc/rc.d/lighttpd restart    # 每晚的21:30重启apache。\n45 4 1,10,22 * * /usr/local/etc/rc.d/lighttpd restart    # 每月1、10、22日的4 : 45重启apache。\n10 1 * * 6,0 /usr/local/etc/rc.d/lighttpd restart    # 每周六、周日的1 : 10重启apache。\n0,30 18-23 * * * /usr/local/etc/rc.d/lighttpd restart    # 在每天18 : 00至23 : 00之间每隔30分钟重启apache。\n0 23 * * 6 /usr/local/etc/rc.d/lighttpd restart    # 每星期六的11 : 00 pm重启apache。\n* */1 * * * /usr/local/etc/rc.d/lighttpd restart    # 每一小时重启apache\n* 23-7/1 * * * /usr/local/etc/rc.d/lighttpd restart    # 晚上11点到早上7点之间，每隔一小时重启apache\n0 11 4 * mon-wed /usr/local/etc/rc.d/lighttpd restart    # 每月的4号与每周一到周三的11点重启apache\n0 4 1 jan * /usr/local/etc/rc.d/lighttpd restart    # 一月一号的4点重启apache\n*/30 * * * * /usr/sbin/ntpdate 210.72.145.44    # 每半小时同步一下时间\n"},{"tag":"linux","name":"重启","lang":"shell","des":"# 重启电脑\nshutdown -h|-r now    # 安全关机|重启，now可以更改为时间\nreboot    # 重启\n# 重启\\服务：\n/usr/local/apache2/bin/apachectl stop\n/usr/local/apache2/bin/apachectl start\n/etc/rc.d/init.d/nginx restart\nservice nginxd reload\n"},{"tag":"linux","name":"service","lang":"shell","des":"# 能识别的目录！直接service httpd start\n/etc/rc.d/init.d/\n"},{"tag":"linux","name":"时间及管理","lang":"shell","des":"date    # 查看系统时间\ndate -s 20130220    # 设定日期\ndate -s 09:30:00    # 设定时间\n# 远程校准时间\nyum -y install ntpdate\nntpdate cn.pool.ntp.org\n"},{"tag":"linux","name":"php进程管理php-fpm","lang":"shell","des":"# 1. 查看服务\nps aux | grep --color=auto php-fpm\n# 2. 修改执行php进程用户\nvim /etc/php-fpm.d/www.conf     # 修改 user group\n/etc/init.d/php-fpm restart    # 重启\nchown -R user:group /var/lib/php/session    # 修改需要权限的文件夹\n"},{"tag":"linux","name":"常见目录信息","lang":"shell","des":"/           # 根目录\n/bin        # 命令保存目录（普通用户就可以读取的命令）\n/boot       # 启动目录，启动相关文件\n/dev        # 设备文件保存目录\n/etc        # 配置文件保存目录\n/home       # 普通用户的家目录\n/lib        # 系统库保存目录\n/mnt        # 系统挂载目录\n/media      # 挂载目录\n/root       # 超级用户的家目录\n/tmp        # 临时目录\n/sbin       # 命令保存目录（超级用户才能使用的目录）\n/proc       # 直接写入内存的\n/sys\n/usr                # 系统软件资源目录\n/usr/bin/           # 系统命令（普通用户）\n/usr/sbin/          # 系统命令（超级用户）\n/var                # 系统相关文档内容（系统可变数据保存目录）\n/var/log/           # 系统日志位置\n/var/spool/mail/    # 系统默认邮箱位置\n/var/lib/mysql/     # 默认安装的mysql的库文件目录\n"},{"tag":"linux","name":"curl 使用","lang":"shell","des":"curl -o ~/baidu.html https://www.baidu.com    # 下载到指定文件\ncurl -x 127.0.0.1:3128 https://www.google.com/humans.txt    # 指定代理\ncurl -k https://www.baidu.com    # 允许不使用证书到SSL站点\ncurl -v https://www.baidu.com    # 显示详情\ncurl -s https://www.baidu.com    # 静默模式\ncurl -d \"param1=value1&param2=value2\" \"http://www.baidu.com\"    # post请求\ncurl -l -H \"Content-type: application/json\" -X POST -d '{\"phone\":\"135xxxxxxxx\",\"password\":\"test\"}' http://domain/apis/users.json    # json格式的post请求\ncurl http://adms.test.com/api/getUserInfo\\?auth\\=$(echo -n $(date +%s) | md5sum | awk '{printf $1\"YOUR_KEY\";}' | md5sum | awk '{printf $1;}')    # 两次 md5 的验证例子\n"},{"tag":"linux","name":"查看系统信息","lang":"shell","des":"netstat -apn | grep 80    # 查看80端口被哪些进程占用\nps aux[|grep nginx]    # 查看当前系统所有运行的进程\nuname -a    # 内核版本\ncat /etc/issue    # 系统信息\ncat /proc/version    # 系统详情\n"},{"tag":"linux","name":"查看文件夹信息","lang":"shell","des":"df -h    # 查看磁盘空间\ndu -sh *    # 查看当前目录下个文件（夹）大小\ndu -sh * | sort -rn | grep \"M\\s\"    # sort\nls | wc -l    # 查看当前文件夹下文件（夹）的个数\nls -l | grep \"^-\" | wc -l    # 查看当前文件夹下文件的个数\nls -lR | grep \"^-\" | wc -l    # 查看某目录下文件的个数，包括子目录里的。\nls -lR | grep \"^d\" | wc -l    # 查看某文件夹下目录的个数，包括子目录里的。\nll --full-time    # 查看文件的完整时间信息\nll -t | head -n 5    # 查看最新的5个文件\nfind . -maxdepth 1 -type d -print0 | xargs -0 -I {} sh -c 'echo -e $(find {} | wc -l) {}' | sort -n    # 统计当前目录下每个文件夹包含的文件数\n"},{"tag":"linux","name":"composer安装","lang":"shell","des":"# 国内安装-1\ncurl -sS https://install.phpcomposer.com/installer | php    # 下载源码包php执行\nmv composer.phar /usr/local/bin/composer    # 加入到系统命令\ncomposer config -g repo.packagist composer https://packagist.phpcomposer.com    # 全局配置国内镜像源\n# 国内安装-2\nwget https://dl.laravel-china.org/composer.phar -O /usr/local/bin/composer\nchmod a+x /usr/local/bin/composer\ncomposer config -g repo.packagist composer https://packagist.laravel-china.org\n# 使用\ncomposer config -l -g    # 查看全局配置信息\ncomposer clear-cache    # 清除缓存\ncomposer require --no-plugins --no-scripts xxx/xxxx     # root 下安装\n"},{"tag":"linux","name":"安装php扩展extension","lang":"shell","des":"# pear 命令安装\npear install xdebug    # 失败则扩展pear已不维护\n# 源码安装\ncd /xxx/php-包/ext/EXTENSION\nphpize    # 确认命令可使用\n./configure -with-php-config=/usr/local/php/bin/php-config\nmake && make install\necho extension=EXTENSION.so >> /usr/local/php/etc/php.ini\n"},{"tag":"linux","name":"更换阿里云yum源","lang":"shell","des":"mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup    # 备份\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo    # 下载相应的yum源\nyum clean all    # 运行yum\nyum makecache    # makecache生成缓存\n"},{"tag":"linux","name":"xshell连接服务器","lang":"shell","des":"# 倒计时界面enter安装，一直下一步\nchkconfig iptables off    # 开机关闭iptables\nservice iptables stop    # 立即关闭iptables\n# 设置网络连接为【NAT】\nservice sshd start    # 开启ssh\n"},{"tag":"linux","name":"服务开机启动","lang":"shell","des":"vim /etc/inittab    # :id:5:initdefault: 启动级别，5图形界面改，3纯命令行\nchkconfig [--level 服务级别] 服务名 on    # 设置开机启动，off关闭\nchkconfig --level 345 mysqld on    # MySQL开机启动\nchkconfig --list    # 查看自启动列表、级别\n# 0:off  1:off   2:on    3:off   4:on    5:off   6:off\nntsysv    # 伪图形界面启动服务\n"},{"tag":"linux","name":"用户相关","lang":"shell","des":"# 用户操作\nsu weilong    # 切换用户\nsudo -i    # 切换到root\nuseradd -G {group-name} weilong    # 新建用户[到组]\n# 密码操作\npasswd weilong    # 修改用户密码\nuserdel [-r|f] weilong    # 删除用户[及目录|强制删除]\nvim /etc/passwd[group|shadow]    # 查看所有用户[组|密码]信息\n# /etc/passwd 用户名:口令:用户标识号:组标识号:描述:主目录:登录Shell\n# 组操作\ngpasswd -a [-d] 用户名 组名    # 把用户加入[删除]到组\nusermod -a -G groupA user    # 将用户添加到组groupA中，而不必离开其他用户组\n# 给用户添加sudo，需root操作\nchmod 600 /etc/sudoers\necho 'weilong ALL=(ALL) ALL' >> /etc/sudoers\nchmod 400 /etc/sudoers    # 收起写权限\n# 禁止用户登陆\nusermod -L weilong    # Lock 帐号weilong\nusermod -U weilong    # Unlock 帐号weilong\n# ssh秘钥登陆服务端配置：/etc/ssh/sshd_config\nRSAAuthentication yes    # 使用RSA认证\nPubkeyAuthentication yes    # 允许Pubkey Key\nAuthorizedKeysFile .ssh/authorized_keys    # id_rsa.pub放入【该用户】下此文件\nPasswordAuthentication no    # 不允许密码登陆\nPermitEmptyPasswords no    # 不允许无密码登陆\nPermitRootLogin no   # 不允许root直接登陆\nAllowUsers weilong    # 允许用户\n# sftp登陆服务器\nSubsystem sftp internal-sftp    # sftp配置\nX11Forwarding no\nAllowTcpForwarding no\nMatch user[Group] weilong    # 配置用户[组]——start\nForceCommand internal-sftp\nChrootDirectory /home    # 所属用户必须为root——end\n"},{"tag":"linux","name":"文件上传rz下载sz","lang":"shell","des":"yum -y install lrzsz\n"},{"tag":"linux","name":"scp文件传输","lang":"shell","des":"cp LOCAL_FILE REMOTE_USERNAME@REMOTE_IP:REMOTE_FOLDER\n"},{"tag":"linux","name":"命令重命名，创建快捷命令","lang":"shell","des":"echo alias ws=\\\\'cd /home/wwwroot/default/\\\\' >> ~/.bashrc && source ~/.bashrc\n"},{"tag":"linux","name":"终端快捷操作","lang":"shell","des":"ctrl+a 跳转至行首，ctrl+e 跳转至行尾\nctrl+k 快清至行首，ctrl+u 快清至行尾\nctrl+w 清除当前光标位置之前的一个单词\nctrl+c 强制终止，ctrl+l 清屏\ncmd !! 双惊叹号表示上一行命令\n!cmd   执行最近的已cmd开头的命令\n"},{"tag":"linux","name":"查看文件","lang":"shell","des":"tail -f FILENAME    # 动态查看文件最新变化\ncat [-n] 文件名    # 所有内容[显示行号]\nmore 文件名    # 分屏显示，space|b|q 翻页下|上|退出\nhead [-n 2] 文件名    # 显示文件头[两行]\n"},{"tag":"mysql","name":"分配权限 GRANT","lang":"sql","des":"GRANT ALL PRIVILEGES ON *.* TO 'weilong'@'192.168.3.94' IDENTIFIED BY 'mypwd' WITH GRANT OPTION;\nGRANT Select ON *.* TO 'weilong'@'172.30.%' IDENTIFIED BY \"Wwl_Jumpbox_666\";\nflush privileges;\n"},{"tag":"mysql","name":"更改用户密码","lang":"sql","des":"mysql -u root\nmysql> use mysql;\nmysql> UPDATE user SET Password = PASSWORD('newpass') WHERE user = 'root';\nmysql> FLUSH PRIVILEGES;\n"},{"tag":"mysql","name":"更改用户可访问HOST","lang":"sql","des":"mysql> use mysql;\nmysql> UPDATE user SET host='%' WHERE user='root';\nmysql> FLUSH PRIVILEGES;\n"},{"tag":"mysql","name":"大表分页查询优化","lang":"sql","des":"mysql> SELECT film_id,description FROM sakila.film ORDER BY title LIMIT 50,5;\nmysql> SELECT film.film_id,Film.description\n    ->  FROM  sakila.film\n    ->  INNER JOIN (\n    ->      SELECT film.film_id FROM sakila.film\n    ->      ORDER BY title LIMIT 50,5\n    ->  ) AS lim USING(film_id);\nmysql> SELECT * FROM sakila*rental\n    -> WHERE rental id < 16030,\n    -> ORDER BY rental id DESC LIMIT 20;\n"},{"tag":"php","name":"记住一些常量、常用函数","lang":"php","des":"date_default_timezone_set('PRC');    // 同php.ini设置 date.timezone = PRC\nfile_put_contents(dirname(__FILE__) . '/params.log', json_encode($data), FILE_APPEND);\n"},{"tag":"php","name":"测试不同版本脚本","lang":"php","des":"docker run -it --rm --name my-running-script -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp php:5.4-cli php -v\ndocker run -it --rm --name my-running-script -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp php:5.6-cli php -v\ndocker run -it --rm --name my-running-script -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp php:7.0-cli php -v\ndocker run -it --rm --name my-running-script -v \"$PWD\":/usr/src/myapp -w /usr/src/myapp php:7.1-cli php -v\n"},{"tag":"php","name":"Composer 版本约束表达式的使用","lang":"shell","des":"*           # 根据 minimum-stability 的值情况来决定安装最新的 dev\ndev-master  # 指定分支下最新代码\n~1.2        # ~ 的作用是允许表达式中最后一位变到最大值，1.0 - 1.99\n~0.2.3      #  ~ 表示最后一位可变，0.2.0 - 0.2.99\n^1.2        # ^ 锁定不允许变的第一位，1.xx - 1.99.99\n>= 1.3 <1.6、>=1.3 | >=1.7 、3.0|4.0    # 版本控制在某些范围\n=1.2.34 或者 1.2.34    # 指定了具体的版本号\ncomposer show    # 显示当前安装的包及版本\n"},{"tag":"php","name":"Laravel DB 操作技巧","lang":"php","des":"# Doc: https://cs.laravel-china.org/#db\n$table = DB::table('user');\n$table->get()                       # 对应类：illuminate/support/Collection.php\n$table->pluck('ipgroup_id')->all(); # 获取单个字段的数组\n$table->where([                     # 多个where条件1种写法\n    'uid' => 'xiaoming',\n    'ip' => '192.90.1.140',\n])->all();\n$table->where([                     # 多个where条件2种写法\n    ['uid', 'xiaoming'],\n    ['ip', '192.90.1.140'],\n])->all();\n$table->where('uid', 'xiaoming')    # 多个where条件3种写法\n    ->where('ip', '192.90.1.140')\n    ->all();\n"},{"tag":"php","name":"微信资源搜集","lang":"html","des":"<a href=\"https://mp.weixin.qq.com/wiki/8/f9a0b8382e0b77d87b3bcc1ce6fbc104.html\">公众号验证token方法</a>\n头像地址（大）：http://wx.qlogo.cn/mmopen/PZI7pLaVibDOjmMHibk6NialWiaLru5XVlTfV207cH6bszhHHicE1Tr4tkF3wyZTvnYdbB2bbhtHxeN77icDalTJ1fOgfye44UUw7a/0\n头像地址（小）：http://wx.qlogo.cn/mmopen/PZI7pLaVibDOjmMHibk6NialWiaLru5XVlTfV207cH6bszhHHicE1Tr4tkF3wyZTvnYdbB2bbhtHxeN77icDalTJ1fOgfye44UUw7a/46\n"},{"tag":"php","name":"比较好的密码存储处理","lang":"php","des":"// sha1/md5都行\n$salt = sha1(uniqid(mt_rand(), true));\n$pwdDb = sha1($salt . sha1($pwdUser) . KEY);\n"},{"tag":"php","name":"PHP time() date() strtotime()日期函数总结","lang":"php","des":"// 返回时间戳\necho time();    // int(1392192781)\n将其他格式解析为 Unix 时间戳\necho strtotime($str);    // 将其他格式解析为 Unix 时间戳\n    /*下括号内格式例：\n         ( \"10 September 2000\" )\n         ( \"+1 day\" )   明天\n         ( \"+1 days\" )  明天\n         ( \"+1 week\" )\n         ( \"+1 week 2 days 4 hours 2 seconds\" )\n         ( \"next Thursday\" )    下周二\n         ( \"last Monday\" )\n         ( \"2011-5-19 14:07\" );\n    */\necho mktime(12, 0, 0, 12, 30, 2012);     // mktime(时[,分[,秒[,月[,日[,年]]]]]); 都可以超出自然范围，如27月，超出向高位加；若整体数值超出计算机能力范围，返回false。\necho microtime();    // 返回微秒精度的时间戳字符串。\n// 返回一个数组\n$today = getdate();\n    /* 输出数组： array(11) {\n           [\"seconds\"]=>int(32)\n           [\"minutes\"]=>int(27)\n           [\"hours\"]=>int(8)\n           [\"mday\"]=>int(12)\n           [\"wday\"]=>int(3)\n           [\"mon\"]=>int(2)\n           [\"year\"]=>int(2014)\n           [\"yday\"]=>int(42)\n           [\"weekday\"]=>string(9) \"Wednesday\"\n           [\"month\"]=>string(8) \"February\"\n           [0]=>int(1392193652)\n     } */\n// 格式化输出时间\necho date(\"Y-m-d H:i:s\", 1391919385);    // string(19) \"2014-02-09 04:16:25\"\n    /*string format 常用：\n        Y：四位数年   m：月01-12   n:月1-12      d：天01-31  j：天1-31\n        H：时24时制   h：小时12制  i：分钟00-59  s：秒00-59  w：星期几0-6\n        A：上午AM或下午PM          a：上午am或下午pm。\n    */\necho date('Y-m-d H:i:s') . substr((string) microtime(), 1, 6), \"<br>\";    // 详细时间\n// 修改默认时区\ndate.timezone = PRC    # 修php.ini配置文件\ndate_default_timezone_set(\"PRC\");    // 设置当前脚本时区为中国时区\ndate_default_timezone_get();    // 获取当前时区\n"},{"tag":"php","name":"字符串函数 string function","lang":"php","des":"// 截取\necho substr('我是王伟龙', -3);    // 取最后一个汉字\nsubstr('ifeng.com.txt', -4) == '.txt' && echo 'yes';    // 判断最后四位是不是 .txt\n// 小数处理\n"},{"tag":"php","name":"数组函数函数 array function","lang":"php","des":"max(array_keys($descArr));    // 获取数组最大的key\narray_filter([1, 0, 2, null, 3, 6, 7]);    // 去取数组( == false )的值，保留键值\narray_unique([1, 0, 2, true, '1', false, null, 2, 7]);    // - 去除数组中重复的元素值 res: [0]=> int(1) [1]=> int(0) [2]=> int(2) [5]=> bool(false) [8]=> int(7)\nshuffle(array);    # 打乱数组排序\n"},{"tag":"php","name":"创建新的空对象","lang":"php","des":"$var1 = new stdClass();\n$var2 = (object)[];\n$var3 = json_decode('{}');\n"},{"tag":"php","name":"类的笔记","lang":"php","des":"// 静态方法没有实例化类，没有$this，没有调用 function __construct()\nstatic function someFunc(){\n    echo self::$country;\n    // echo $this->name;  ❌错误\n}\n// const 一旦定义不能更改\n// 静态变量魔术方法不起作用\n# 用反射获取类的信息\n$ref = new \\ReflectionClass($class);\nprint_r($ref->getConstants());\nprint_r($ref->getProperties());\nprint_r($ref->getMethods());\n"},{"tag":"php","name":"一行代码实现两个值交换，不引入第三个变量","lang":"php","des":"$a = 3;\n$b = 4;\nlist($b, $a) = array($a, $b);\n$a = $a + $b && $b = $a - $b && $a = $a - $b;\n$a = $a ^ $b && $b = $b ^ $a && $a = $a ^ $b;\n"},{"tag":"php","name":"得到多维数组所有key","lang":"php","des":"function array_all_keys($array) {\n    foreach ($array as $k => $v) {\n        $keys[] = $k;\n        if (is_array($v)) $keys = array_merge($keys, array_all_keys($v));\n    }\n    return $keys;\n}\n"},{"tag":"php","name":"数组按内部值重新排序","lang":"php","des":"// usort更新索引为0123，uasort为保持索引\n$arr['a'] = ['name' => 'weilong', 'num' => 3, 'volume' => 98];\n$arr['b'] = ['name' => 'weimong', 'num' => 2, 'volume' => 88];\n$arr['c'] = ['name' => 'weicong', 'num' => 1, 'volume' => 77];\nuasort($arr, function($a, $b) {\n    if ($a['num'] == $b['num']) return 0;\n    return ($a['num'] > $b['num']) ? 1 : -1;\n});\n"},{"tag":"php","name":"printf sprintf 高级用法","lang":"php","des":"printf(\"%b\", 250);    //将250转成二进制： 11111010\nprintf(\"%o\", 250);    //将250转成八进制： 0372\nprintf(\"%x\", 250);    //将250转成十六进制： 0xfa\nsprintf(\"%04d\", 13);    // 补全4位：0013\n"},{"tag":"php","name":"编码问题","lang":"php","des":"/**\n *|————————————————————————————————————————————————————————————|\n *|            |   a     |        王伟龙                        |\n *| ASCII      |   97    | 231 142 139 228 188 159 233 190 153 |\n *| Unicode    | \\\\u0061 | \\\\u738b\\\\u4f1f\\\\u9f99               |\n *| UrlEncode  |   a     | %e7%8e%8b%e4%bc%9f%e9%be%99         |\n *|————————————————————————————————————————————————————————————|\n */\n// 函数\nstring chr ( int $ascii )    // 返回相对应于 ASCII 所指定的单个字符\nint ord ( string $string )   // 返回第一个字符的ASCII码值\n"},{"tag":"php","name":"比较有用的命令","lang":"shell","des":"# PATH\nphp -i | grep configure         # 可以查看【PHP安装目录】位置\nphp -i | grep php.ini           # 可以查看【php.ini】位置\nphp -i | grep -i extension      # 查看php扩展信息\nps aux | grep php-fpm.conf      # 可以查看【php-fpm.conf】位置\nphp-fpm -t                      # 可以查看【php-fpm.conf】位置\nexport PATH=$PATH:PHP安装目录/php/bin    # php命令加入path\n# CONFI 配置文件\nphp -v\n# TEST\nwget https://wilon.github.io/static/p.php    # 雅黑PHP探针\n"},{"tag":"php","name":"Windows安装php扩展","lang":"php","des":"1. 查看phpinfo —— PHP Version、Architecture、PHP Extension Build\n2. 根据(1)的信息下载dll：http://pecl.php.net 搜索 <a target='_blank' href='http://pecl.php.net'>打开链接</a>\n3. dll放入 php\\\\ext\\\\ ，php.ini 添加 extension=php_xxx.dll\n"},{"tag":"php","name":"html字符串处理","lang":"php","des":"/**\n* html字符串处理\n*|———————————————————————————————————————|\n*| 字符 |  描述   |  html实体    |         |\n*|     |  空格   |  &amp;nbsp;  |         |\n*|  <  |  小于号 |  &amp;lt;    | special |\n*|  >  |  大于号 |  &amp;gt;    | special |\n*|  &  |  和号   |  &amp;amp;   | special |\n*|  \\\" |  引号   |  &amp;quot;  | special |\n*|  '  |  撇号   |  &amp;apos;  | special |\n*|  ￠ |  分     |  &amp;cent;  |         |\n*|  £  |  镑     |  &amp;pound; |         |\n*|  ¥  |  日圆   |  &amp;yen;   |         |\n*|  €  |  欧元   |  &amp;euro;  |         |\n*|  §  |  小节   |  &amp;sect;  |         |\n*|  ©  |  版权   |  &amp;copy;  |         |\n*|  ®  |  商标   |  &amp;reg;   |         |\n*|  ™  |  商标   |  &amp;trade; |         |\n*|  ×  |  乘号   |  &amp;times; |         |\n*|  ÷  |  除号   |  &amp;divide;|         |\n*|———————————————————————————————————————|\n*/\n$str1 = html_entity_decode($str);       // html实体 --> 字符\n$str2 = htmlentities($str);             // 字符 --> html实体\n$str3 = htmlspecialchars_decode($str);  // special html实体 --> 字符\n$str4 = htmlspecialchars($str);         // special 字符 --> html实体\n"},{"tag":"php","name":"编码问题","lang":"php","des":"// 1. PHP文件的编码格式， gbk->utf-8\n$content = iconv('GBK', 'UTF-8', $content);     // 推荐\n$content = mb_convert_encoding($content, 'UTF-8','GBK');\n$data = eval('return ' . iconv('GBK', 'UTF-8', var_export($data, true)) . ';');    // 数组\n2. PHP文件中：header('Content-type:text/html;Charset=utf-8');\n3. 浏览器的查看编码\n4. &lt;meta charset='utf-8'/&gt\n5. mysql_set_charset('utf8');\n6. mysql> set names utf8;\n"},{"tag":"php","name":"PHP语言结构，非函数，比函数快","lang":"php","des":"echo print die isset unset include require array list empty\n// 注意，include_once()是函数; 注意，require_once()是函数;\n"},{"tag":"php","name":"empty与isset","lang":"php","des":"empty($a['a']);  // 若$a['a']所等于的值是0或null,则为真！\nisset($b['b']);  // 若$b['b']存在'b'这个键，则为真！\n"},{"tag":"php","name":"--version 版本需要注意的","lang":"php","des":"//\n//\n// php-v >=5.3\n//\n$a = $b ?: $c;    // php-v >= 5.3\n// php匿名函数 php-v >= 5.3\nnamespace Foo\\Bar\\somenamespace;    // php-v >= 5.3\n// 新增了循环引用的垃圾回收器并且默认是开启的.\n// 新增 const 关键字\n//\n//\n// php-v >=5.4\n//\n// 新增支持 traits 。\n// 新增短数组语法，比如 $a = [1, 2, 3, 4]; 或 $a = ['one' => 1, 'two' => 2, 'three' => 3, 'four' => 4]; 。\n// 新增支持对函数返回数组的成员访问解析，例如 foo()[0] 。\n// 现在 闭包 支持 $this 。\n// 现在不管是否设置 short_open_tag php.ini 选项，<?= 将总是可用。\n// 新增在实例化时访问类成员，例如： (new Foo)->bar() 。\n// 现在支持 Class::{expr}() 语法。\n// 新增二进制直接量，例如：0b001001101 。\n// 改进解析错误信息和不兼容参数的警告。\n// SESSION 扩展现在能追踪文件的 上传进度 。\n// 内置用于开发的 CLI 模式的 web server 。\n//\n//\n// php-v >=5.5\n//\n// 正则修饰符e，自 PHP 5.5.0 起废弃。改用 preg_replace_callback\nyield $output[$ln];    // 生成器 php-v >= 5.5\nforeach ($array as list($a, $b)) {}    // foreach嵌套list php-v >= 5.5\n// 新增 finally 关键字\n// empty() 支持任意表达式\n//\n//\n// php-v >=5.6\n//\nfunction writeFileLog($file, ...$params) {}    // 动态参数 php-v >= 5.6\nwriteFileLog('a.log', ...[$var1, $var2]);    // 使用 ... 运算符进行参数展开\nuse function 以及 use const\n//\n//\n// php-v >=7.0\n//\n// 在 PHP 7 中，很多致命错误以及可恢复的致命错误，都被转换为异常来处理了。\nfunction fileOpen(string $fileName, string $mode): resource {}    // 开始支持\n$username = $_GET['user'] ?? 'nobody';    // ?? 支持\necho $a <=> $b;    // 太空船操作符（组合比较符）$a = $b，返回0；$a > $b，返回1，反之返回-2\n// 通过 define() 定义常量数组\n// 匿名类，不需要实例化\n//\n//\n// php-v >=7.1\n//\n// 类常量可见性，支持 public、protected\n// list()现在支持键名\n"},{"tag":"php","name":"文件上传后print_r($_FILES);","lang":"php","des":"Array (\n    [pic] => Array (     //picname为前端表单name:&lt;input type=\\\"file\\\" name=\\\"pic\\\"/&gt;\n        [name] => iphone5.jpg\n        [type] => image/jpeg\n        [tmp_name] => C:\\\\Windows\\\\Temp\\\\phpA6ED.tmp\n        [error] => 0\n        [size] => 89470\n    )\n)\n"},{"tag":"php","name":"面试必知必会","lang":"php","des":"· redis、memcached区别\n· cookie、session区别\n· 手写冒泡排序、快速排序\n· 手写单例模式、工厂模式\n"},{"tag":"preg","name":"TIPS","lang":"php","des":"注意重复加双杠 (\\\\d)\\\\\\\\1\n"},{"tag":"preg","name":"模式修整符","lang":"php","des":"i 表示不区分大小写\ns 表示匹配视为单行（就是可以让点.能支持换行）\nU 表示拒绝贪婪匹配（与?有冲突）\n"},{"tag":"preg","name":"常用正则表达式大全","lang":"markdown","des":"一、校验数字的表达式\n1.  数字：`^[0-9]*$`\n2.  n位的数字：`^\\d{n}$`\n3.  至少n位的数字：`^\\d{n,}$`\n4.  m-n位的数字：`^\\d{m,n}$`\n5.  零和非零开头的数字：`^(0|[1-9][0-9]*)$`\n6.  非零开头的最多带两位小数的数字：`^([1-9][0-9]*)+(.[0-9]{1,2})?$`\n7.  带1-2位小数的正数或负数：`^(\\-)?\\d+(\\.\\d{1,2})?$`\n8.  正数、负数、和小数：`^(\\-|\\+)?\\d+(\\.\\d+)?$`\n9.  有两位小数的正实数：`^[0-9]+(.[0-9]{2})?$`\n10.  有1~3位小数的正实数：`^[0-9]+(.[0-9]{1,3})?$`\n11.  非零的正整数：`^[1-9]\\d*$` 或 `^([1-9][0-9]*){1,3}$` 或 `^\\+?[1-9][0-9]*$`\n12.  非零的负整数：`^\\-[1-9][]0-9\"*$` 或 `^-[1-9]\\d*$`\n13.  非负整数：`^\\d+$` 或 `^[1-9]\\d*|0$`\n14.  非正整数：`^-[1-9]\\d*|0$` 或 `^((-\\d+)|(0+))$`\n15.  非负浮点数：`^\\d+(\\.\\d+)?$` 或 `^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$`\n16.  非正浮点数：`^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$` 或 `^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$`\n17.  正浮点数：`^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$` 或 `^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$`\n18.  负浮点数：`^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$` 或 `^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$`\n19.  浮点数：`^(-?\\d+)(\\.\\d+)?$` 或 `^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$`\n二、校验字符的表达式\n1.  汉字：`^[\\u4e00-\\u9fa5]{0,}$`\n2.  英文和数字：`^[A-Za-z0-9]+$` 或 `^[A-Za-z0-9]{4,40}$`\n3.  长度为3-20的所有字符：`^.{3,20}$`\n4.  由26个英文字母组成的字符串：`^[A-Za-z]+$`\n5.  由26个大写英文字母组成的字符串：`^[A-Z]+$`\n6.  由26个小写英文字母组成的字符串：`^[a-z]+$`\n7.  由数字和26个英文字母组成的字符串：`^[A-Za-z0-9]+$`\n8.  由数字、26个英文字母或者下划线组成的字符串：`^\\w+$` 或 `^\\w{3,20}$`\n9.  中文、英文、数字包括下划线：`^[\\u4E00-\\u9FA5A-Za-z0-9_]+$`\n10.  中文、英文、数字但不包括下划线等符号：`^[\\u4E00-\\u9FA5A-Za-z0-9]+$` 或 `^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$`\n11.  可以输入含有^%&',;=?$\\\"等字符：`[^%&',;=?$\\x22]+`\n12.  禁止输入含有~的字符：`[^~\\x22]+`\n三、特殊需求表达式\n1.  Email地址：`^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`\n2.  域名：`[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?`\n3.  InternetURL：`[a-zA-z]+://[^\\s]*` 或 `^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$`\n4.  手机号码：`^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$`\n5.  电话号码(\"XXX-XXXXXXX\"、\"XXXX-XXXXXXXX\"、\"XXX-XXXXXXX\"、\"XXX-XXXXXXXX\"、\"XXXXXXX\"和\"XXXXXXXX)：`^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$`\n6.  国内电话号码(0511-4405222、021-87888822)：`\\d{3}-\\d{8}|\\d{4}-\\d{7}`\n7.  身份证号(15位、18位数字)：`^\\d{15}|\\d{18}$`\n8.  短身份证号码(数字、字母x结尾)：`^([0-9]){7,18}(x|X)?$` 或 `^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$`\n9.  帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：`^[a-zA-Z][a-zA-Z0-9_]{4,15}$`\n10.  密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：`^[a-zA-Z]\\w{5,17}$`\n11.  强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：`^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$`\n12.  日期格式：`^\\d{4}-\\d{1,2}-\\d{1,2}`\n13.  一年的12个月(01～09和1～12)：`^(0?[1-9]|1[0-2])$`\n14.  一个月的31天(01～09和1～31)：`^((0?[1-9])|((1|2)[0-9])|30|31)$`\n15.  钱的输入格式：``\n16.  1.有四种钱的表示形式我们可以接受:\"10000.00\" 和 \"10,000.00\", 和没有 \"分\" 的 \"10000\" 和 \"10,000\"：`^[1-9][0-9]*$`\n17.  2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符\"0\"不通过,所以我们采用下面的形式：`^(0|[1-9][0-9]*)$`\n18.  3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：`^(0|-?[1-9][0-9]*)$`\n19.  4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：`^[0-9]+(.[0-9]+)?$`\n20.  5.必须说明的是,小数点后面至少应该有1位数,所以\"10.\"是不通过的,但是 \"10\" 和 \"10.2\" 是通过的：`^[0-9]+(.[0-9]{2})?$`\n21.  6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：`^[0-9]+(.[0-9]{1,2})?$`\n22.  7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：`^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$`\n23.  8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：`^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$`\n24.  备注：`这就是最终结果了,别忘了\"+\"可以用\"*\"替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里`\n25.  xml文件：`^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$`\n26.  中文字符的正则表达式：`[\\u4e00-\\u9fa5]`\n27.  双字节字符：`[^\\x00-\\xff]` (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n28.  空白行的正则表达式：`\\n\\s*\\r` (可以用来删除空白行)\n29.  HTML标记的正则表达式：`<(\\S*?)[^>]*>.*?</\\1>|<.*? />` (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)\n30.  首尾空白字符的正则表达式：`^\\s*|\\s*$或(^\\s*)|(\\s*$)` (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n31.  腾讯QQ号：`[1-9][0-9]{4,}` (腾讯QQ号从10000开始)\n32.  中国邮政编码：`[1-9]\\d{5}(?!\\d)` (中国邮政编码为6位数字)\n33.  IP地址：`\\d+\\.\\d+\\.\\d+\\.\\d+ `(提取IP地址时有用)\n34.  IP地址：`((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))`\n"},{"tag":"preg","name":"正则?与U会都是拒绝贪婪，且冲突","lang":"php","des":"echo $str = '000abcd333abcd444abscd888';\n$res1 = preg_replace('/ab(.*)d/iU', '123', $str);\n$res2 = preg_replace('/ab(.*?)d/iU', '123', $str);    // 有？恢复贪婪\npreg_match_all('/ab(.*?)d/i', $str, $res3);    // ?与U只能有一个\npreg_match_all('/ab(.*?)d/iU', $str, $res4);\n"},{"tag":"preg","name":"有一串手机号码，按需匹配","lang":"php","des":"$str = '13141078884 83161143334 13263362224 18511925554 18612623450 13141102288 13161146662 13263370884 18513608884 18612625555 13141108580 13161146667 13263389994 13264459992 18600004038 18612932626 72368135777788882379.png 2397409202137920749023409.jpg';\n// 匹配手机号\npreg_match_all('/1\\d{10}(?!\\d)(.*?)/', $str, $res3);\n// 后四位匹配ABAB但不包含AAAA\npreg_match_all('/1\\d{6}(?!(\\d)\\\\1)(\\d\\d)\\\\2(?!\\d)(.*?)/', $str, $res);\n// 匹配手机号至少有一个8\npreg_match_all('/1(?![^8]{11})\\d{11}(?!\\d)(.*?)/', $str, $res1);\npreg_match_all('/1(?=\\d*8)\\d{11}(?!\\d)(.*?)/', $str, $res2);\n"},{"tag":"preg","name":"正则基础 1. 原子","lang":"php","des":"原子是组成正则表达式的基本单位,在分析正则表达式时，应作为一个整体。\n   原子包括以下内容:\n> 单个字符、数字，如a-z，A-Z，0-9。\n> 模式单元，如（ABC）可以理解为由多个原子组成的大的原子。\n> 原子表，如 [ABC]。\n> 重新使用的模式单元，如：\\\\1\n> 普通转义字符，如：\\d， \\D， \\w\n> 转义元字符，如：\\*，\\.\n*> 元字符\n"},{"tag":"preg","name":"正则基础 2. 元字符（具有特殊意义字符）","lang":"php","des":"[] 表示单个字符的原子表\n    例如：[aoeiu] 表示任意一个元音字母\n          [0-9] 表示任意一位数字\n          [a-z][0-9]表示小写字和一位数字构成的两位字符\n          [a-zA-Z0-9] 表示任意一位大小字母或数字\n[^] 表示除中括号内原子之外的任何字符 是[]的取反\n    例如：[^0-9] 表示任意一位非数字字符\n          [^a-z] 表示任意一位非小写字母\n{m} 表示对前面原子的数量控制，表示是m次\n    例如：[0-9]{4} 表示4为数字\n          [1][3-8][0-9]{9} 手机号码\n{m,} 表示对前面原子的数量控制，表示是至少m次\n    例如： [0-9]{2,} 表示两位及以上的数字\n{m,n}表示对前面原子的数量控制，表示是m到n次\n    例如： [a-z]{6,8} 表示6到8位的小写字母\n* 表示对前面原子的数量控制，表示是任意次，等价于{0,}\n+ 表示对前面原子的数量控制，表示至少1次，等价于{1,}\n? 表示对前面原子的数量控制，表示0次或1次（可有可无） 等价于{0,1}\n    例如：正整数：[1-9][0-9]*\n            整数：[\\-]?[0-9]+\n            email:\n() 表示一个整体原子。\n        也可以使用?:来拒绝子存储。 （?:.*?）\n    例如：（red） 字串red\n           (red|blue) 字串red或blue\n           (abc){2} 表示两个abc\n    【还有一个子存储单元的作用】\n        \\1 读取第一个子存储单元\n        \\2 读取第二个子存储单元\n        ...\n        php里preg函数需要\\\\1\n        例：匹配ABAB格式数字  (\\d\\d)\\\\1|(\\d)\\\\2(\\d)\\\\3\n|  表示或的意思\n        (rea|blue) 字串red或blue\n^  用在正则单元块的开头处，表示必须以指定的开头\n$  用在正则单元块的结尾处，表示必须以指定的结尾\n.  表示任意一个除换行符之外的字符\n        常用组合： .*? 或 .+? 表示最小匹配所有字符（拒绝贪婪匹配）\n"},{"tag":"preg","name":"正则基础 3. 普通转义字符","lang":"php","des":"*\\d     匹配一个数字；等价于[0-9]\n*\\D     匹配除数字以外任何一个字符；等价于[^0-9]\n*\\w     匹配一个英文字母、数字或下划线；等价于[0-9a-zA-Z_]\n*\\W     匹配除英文字母、数字和下划线以外任何一个字符；等价于[^0-9a-zA-Z_]\n*\\s     匹配一个空白字符；等价于[\\f\\n\\r\\t\\v]\n*\\S     匹配除空白字符以外任何一个字符；等价于[^\\f\\n\\r\\t\\v]\n\\f      匹配一个换页符等价于 \\x0c 或 \\cL\n*\\n     匹配一个换行符；等价于 \\x0a 或 \\cJ\n*\\r     匹配一个回车符等价于\\x0d 或 \\cM\n*\\t     匹配一个制表符；等价于 \\x09\\或\\cl\n\\v      匹配一个垂直制表符；等价于\\x0b或\\ck\n\\oNN    匹配一个八进制数字\n\\xNN    匹配一个十六进制数字\n\\cC     匹配一个控制字符\n"},{"tag":"software","name":"Lantern 更新 Host-Switch-Plus 代理","lang":"shell","des":"Chrome 打开 Lantern 主页\n看[审查元素]：主页的 Remote Address 端口\n修改代理设置：PROXY 127.0.0.1:端口; DIRECT\n"},{"tag":"software","name":"MacOS brew 安装PHP环境","lang":"shell","des":"brew update    # 获取最新版brew\nbrew search php\nbrew install php56    # 安装\nbrew remove mysql56 --force    # （强制）卸载\nbrew upgrade nginx    # 更新\nbrew options php56                 #查看php5.6安装选项\nbrew info    php56                 #查看php5.6相关信息\nbrew home    php56                 #访问php5.6官方网站\nbrew services list                 #查看系统通过 brew 安装的服务\nbrew services cleanup              #清除已卸载无用的启动配置文件\nbrew services restart php56        #重启php-fpm\n"},{"tag":"software","name":"MacOS 修改软件快捷键","lang":"shell","des":"键盘 -> 应用快捷键 -> +\n菜单标题：应用程序菜单上文字\n"},{"tag":"software","name":"VMware 设置某虚拟机开机启动","lang":"shell","des":"\\\"VMware安装目录\\\\vmrun\\\" start \\\"虚拟机文件目录\\\\xxxx.vmx\\\" nogui > vmrun.cmd\n将vmrun.cmd放入开机启动目录startup\\\\\n"},{"tag":"software","name":"epub 文件修改","lang":"shell","des":"# test.epub\nmv test.epub test.zip\nunzip test.zip -d test\ncd test    # some change\nzip -r ../test_new.epub .\n"},{"tag":"software","name":"VMware 设置CentOS虚拟机网络","lang":"shell","des":"# 查看网卡信息\n控制面板 -> 网络 -> 更改适配器配置 -> 状态 -> 详细信息\n# 设置eth0\nvim /etc/sysconfig/network-scripts/ifcfg-eth0\nDEVICE=eth0\nIPADDR={ip}.{ip}.{ip}.188    # 即为连接IP\nNETMASK=255.255.255.0\nGATEWAY={ip}.{ip}.{ip}.2\nDNS1=114.114.114.114\nBROADCAST={ip}.{ip}.{ip}.255\nONBOOT=yes\nNAME=loopback\n# 设置临时 dns\necho \"nameserver 114.114.114.114\" >> /etc/resolv.conf\n"},{"tag":"software","name":"Win 命令提示行美化","lang":"shell","des":"1. 属性 -> 字体大小调为36\n"},{"tag":"software","name":"破解工具","lang":"html","des":"# SQLyog\n1. 永久试用：HKEY_CURRENT_USER\\\\SOFTWARE 对应的权限锁死；\n2. 字体改为Consolas,14px；\n# Datagrip\n<a href=\"http://idea.lanyus.com/\">http://idea.lanyus.com/</a>\n<a href=\"https://hub.docker.com/r/woailuoli993/jblse/\">https://hub.docker.com/r/woailuoli993/jblse/</a>\n"},{"tag":"software","name":"Sublime Text 更换 package 包源","lang":"shell","des":"Ctrl (Command) + Shift + p    # 打开命令面板\nPackage Control: Add Channel    # 找到并打开\n# 添加\n  https://wilon.github.io/static/channel_v3.json    # github\n  http://wilon.oschina.io/static//channel_v3.json    # oschina 国内比较快\n"},{"tag":"software","name":"GitHub 浏览代码快捷键 key","lang":"shell","des":"按 t 键会打开一个文件浏览器\n    按 l 键会显示跳转到行的工具\n    按 s 键会激活顶端的搜索栏\n"},{"tag":"software","name":"Atom 更换 npm 源","lang":"shell","des":"~/.atom/.apmrc 文件添加一行： registry = https://registry.npm.taobao.org\n"},{"tag":"software","name":"Atom 必备插件","lang":"shell","des":"activate-power-mode  # 敲代码动态炫效果 —— SETTING: 屏幕关，按键关；CONTROL: ActivatePowerPode-Toggle\npigments  # 文件颜色即时显示\nminimap # 代码缩略图\n"},{"tag":"software","name":"vscode 快捷键","lang":"shell","des":"# ⌘ mac command; win win\n⌘ shift [    # 切换到左边的标签\nalt shift ↓    # 重复当前行\n⌘ k  ⌘ s        # 设置快捷键\n# 需改\n⌘ d   # 重复当前行\n⌘ e   # 删除行\n⌘ 2   # 打开上一个编辑器\n⌘ 3   # 打开下一个编辑器\n# 光标移动\nOn Windows:\nAlt+← .. navigate back\nAlt+→ .. navigate forward\nOn Mac:\nCtrl+- .. navigate back\nCtrl+Shift+- .. navigate forward\nOn Ubuntu Linux:\nCtrl+Alt+- .. navigate back\nCtrl+Shift+- .. navigate forward\n"},{"tag":"software","name":"vscode windows 设置 gitconfig git-bash","lang":"shell","des":"# setting:    \"terminal.integrated.shell.windows\": \"C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe\",\n    # win-git 安装时需选上允许credential，<a href=\"http://t.cn/RECNQ5r\">win git 允许凭证</a>\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/wilon/oh-my-zsh/master/tools/win_gitbash_install.sh)\"\n"},{"tag":"svn","name":"服务端新建项目、配置用户","lang":"shell","des":"# 配置项目\nsvnadmin create /home/svn/newproject    # 新建项目newproject\nvim /home/svn/newproject/config/svnserve.conf\n    anon-access = read\n    auth-access = write\n    # 默认为/home/svn/newproject/config下，可定义\n    authz-db = authz    # 权限管理文件\n    password-db = passwd    # 用户名密码文件\n# 配置权限组\nvim /home/svn/newproject/config/authz\n    [groups]    # 分组\n    developer = weilong\n    [/]    # 分组权限\n    @developer = rw\n# 配置用户=密码\nvim /home/svn/newproject/config/passwd\n    [users]\n    weilong = 123456\n"},{"tag":"svn","name":"提交代码","lang":"shell","des":"svn status    # 查看状态\nsvn add    # 添加文件\nsvn commit -m '说明'    # 向上提交\n"},{"tag":"svn","name":"查看一些信息","lang":"shell","des":"svn log    # 查看提交日志\nsvn log -r 95    # 查看某次提交日志\nsvn log -l 2    # 查看最近2次提交日志\nsvn info [/project/path]    # 查看项目信息\n"},{"tag":"svn","name":"操作文件","lang":"shell","des":"svn　revert　[--recursive]　文件名    # 恢复文件为最新版\nsvn propset svn:ignore 'vendor'    # 忽略，加入到ignore\n"},{"tag":"svn","name":"版本管理","lang":"shell","des":"svn merge -r 28:25 something    # 回滚到版本号\n"},{"tag":"svn","name":"删库跑路","lang":"shell","des":"find . -type d -name \".svn\"|xargs rm -rf    # 回滚到版本号\n"},{"tag":"vim","name":"多行添加、删除注释","lang":"shell","des":"# 添加\nctrl+v j    #　选中多行\nＩ    # 大写<i>，插入模式，进行输入\nEsc    # 多行起作用\n# 删除\nctrl+v j    #　选中多行\nd [x]    # 删除模式\n"},{"tag":"vim","name":"配置安装 .vimrc","lang":"shell","des":"git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim\nwget https://raw.githubusercontent.com/wilon/oh-my-zsh/master/templates/vimrc.zsh-template -O ~/.vimrc\nvim +PluginInstall +qall\nvim +PluginUpdate +qall\n# 以xx配置操作\nvim -u ~/.wvimrc 文件\nvim -u ~/.wvimrc +PluginInstall +qall\nvim -u ~/.wvimrc +PluginUpdate +qall\n# 一键脚本\n已集成到 <a href=\"https://raw.githubusercontent.com/wilon/oh-my-zsh/master/templates/vimrc.zsh-template\" target=\"_blank\">https://raw.githubusercontent.com/wilon/oh-my-zsh/master/templates/vimrc.zsh-template</a>\n"},{"tag":"vim","name":"Netrw 快捷键","lang":"shell","des":"<cr>        # 如果光标下为目录，则进入该目录；如果光标下是文件，则用vim打开该文件\n-           # 返回上级目录\nc           # 切换vim的当前工作目录为正在浏览的目录\ni           # 在瘦、长、宽和树形的各种列表方式间切换\ns           # 选择排序方式\np           # 预览文件\nt           # 在新标签页里打开光标所在的文件/目录\n"},{"tag":"vim","name":"file 文件操作","lang":"shell","des":"CTRL-G :f :fi :file          # 查看文件具体位置\n"},{"tag":"vim","name":"基本的设置","lang":"shell","des":":set encoding=utf-8     # 更改编码\n:set nu!        # 显示行号\n:set wrap       # 自动换行\n:set no|nc      # 忽略大小写，[no]ignorecase，\n# 如果只是想在搜索或者替换的时候偶尔忽略大小写，而不更改全局变量，加 \\c即可： /nancy\\c\n"},{"tag":"vim","name":"单字母动作","lang":"shell","des":"c 删除后插入动作；d 删除动作；y 复制动作；v 选择动作；\nr 单字母替换动作；m 标记动作；z 折叠动作；p 粘贴动作\ni 光标前；I 行首；a 光标后；A行尾；C 删除至行尾\no 光标下一行；O 光标上一行；s 删光标后一个字符；S 清除全行\n"},{"tag":"vim","name":"删除和替换","lang":"shell","des":"【model】/【preg】/[【str】]/【action】\n# 【model】\ng    # 匹配所在行\nv    # 不匹配\n【line】s    # 匹配line\ns    # 匹配当前行\n9s    # 第9行\n9,20s    # 9-20行\n.,20s    # 当前行-20行\n%s    # 所有行\n9,$s    # 9行到底部\n.,$s    # 当前行到底部\n# 【preg】\n\\c 忽略大小写\n# 【action】默认操作第一个\nd    # 删除\ng    # 全部操作\ni    # ignore，忽略大小写\n# 删除示例\n[num]dd    # 向下删除[num]1行\n:g/INSERT.*99cms_news\\c/d       # 删除包含[不包含]字串‘INSERT.*99cms_news’的行   \\c忽略大小写\n:v/INSERT.*99cms_news\\c/d       # 删除不包含字串‘INSERT.*99cms_news’的行        \\c忽略大小写\n:g/^\\s*$/d    # 删除空行\n:g/^\\(.*\\)$\\n\\1$/d    # 删除重复行（ 需先 :sort ）\n:%s/\\s\\+$//g    # 删除行尾空格\n# 替换示例\n:n,$s/vivian/sky/g    # 替换第 n 行开始到最后一行中每一行所有 vivian 为 sky\n:%s/,/\\r/g\n"},{"tag":"vim","name":"标签页功能","lang":"shell","des":":tabe /file    # 新标签打开文件，不输入file则打开空标签\ngt    # 切换到下一个标签\ngT    # 切换到上一个标签\n:tabfir    # 切换到第一个标签\n:tabl    # 切换到最后一个标签\nNgt    # 切换到N号标签\n"},{"tag":"vim","name":"剪切板-寄存器","lang":"shell","des":":di    # 查看所有寄存器信息\n\"Ny    # 将匹配内容放入N号寄存器\n\"Np    # 粘贴N号寄存器信息\n"},{"tag":"vim","name":"切换文件","lang":"shell","des":"ctrl+o    # 上一个编辑位置\nctrl+i    # 下一个编辑位置\nctrl+w gf    # 新标签打开光标所在文件\n:marks    # 可以查看有哪些标记文件\n'N    # 打开N号标记文件'\n:ls    # 查看缓冲区文件，同buffers、files\n:bn    # 打开n号缓冲区文件\n"},{"tag":"vim","name":"移动move","lang":"shell","des":"[num] t [character]    # 匹配到单个字符光标前；f光标后\n[num] w|b    # 上[下]N个单词\n/string    # 匹配到string（不包含）\nH|M|L    # 匹配到窗口的顶部、中间、和底部\n[num](    # 匹配到句首  )句尾 {段首 }段尾 ]]下一个方法名 [[上一个方法名\n"},{"tag":"vim","name":"单字母动作","lang":"shell","des":"ma    # 设定标记a\n`a    # 跳到标记a\n``    # 跳转前的位置\n`[    # 最后修改的位置的开头\n`]    # 最后修改的位置的结尾\n:delmarks a    # 删除标签a；\n:delmarks!    # 删除所有标签，不包括[A-Z]和[0-9]标签。\n"},{"tag":"vim","name":"括号匹配bracket","lang":"shell","des":"ci{    # 删除{}内容，为插入模式\ndi]    # 删除[]内容\ndi(    # 删除()内容\nyi'    # 复制''内容\nvi\"    # 选中\"\"内容\n"}]